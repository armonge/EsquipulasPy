
# ======================================================== #
# File automagically generated by GUI2Exe version 0.5.0
# Copyright: (c) 2007-2009 Andrea Gavana
# ======================================================== #

# Let's start with some default (for me) imports...

from distutils.core import setup
from py2exe.build_exe import py2exe

import glob
import os
import zlib
import shutil



class Target( object ):
    """ A simple class that holds information on our executable file. """
    def __init__( self, **kw ):
        """ Default class constructor. Update as you need. """
        self.__dict__.update( kw )


# Ok, let's explain why I am doing that.
# Often, data_files, excludes and dll_excludes (but also resources)
# can be very long list of things, and this will clutter too much
# the setup call at the end of this file. So, I put all the big lists
# here and I wrap them using the textwrap module.

data_files = [( '', [os.getcwd() + r'\..\doc\manual\doc.qch',
                    os.getcwd() + r'\..\doc\manual\esquipulashelpcollection.qhc',
                    os.getcwd() + r'\ui\res\logo.ico',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\assistant.exe',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\libgcc_s_dw2-1.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\libmySQL.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\mingwm10.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\phonon4.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\qt.conf',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\QtAssistantClient4.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\QtCLucene4.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\QtHelp4.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\QtXml4.dll',
                    'C:\\Python26\\Lib\\site-packages\\PyQt4\\bin\\QtXmlPatterns4.dll'] ),
              ( 'sqldrivers', ['C:\\Python26\\Lib\\site-packages\\PyQt4\\plugins\\sqldrivers\\qsqlite4.dll',
                              'C:\\Python26\\Lib\\site-packages\\PyQt4\\plugins\\sqldrivers\\qsqlmysql4.dll'] ),
              ( 'translations', [os.getcwd() + r'\translations\\qt_es.qm'] )]

includes = []
excludes = ['_gtkagg', '_tkagg', 'bsddb', 'curses', 'email', 'pywin.debugger',
            'pywin.debugger.dbgcon', 'pywin.dialogs', 'tcl',
            'Tkconstants', 'Tkinter']
packages = ['PyQt4.QtCore', 'PyQt4.QtGui', 'PyQt4.QtNetwork', 'PyQt4.QtSql',
            'PyQt4.QtWebKit', 'sip']
dll_excludes = ['libgdk-win32-2.0-0.dll', 'libgobject-2.0-0.dll', 'tcl84.dll',
                'tk84.dll']
icon_resources = [( 1, os.getcwd() + r'\ui\res\logo.ico' )]
bitmap_resources = []
other_resources = []


# This is a place where the user custom code may go. You can do almost
# whatever you want, even modify the data_files, includes and friends
# here as long as they have the same variable name that the setup call
# below is expecting.

# -*- coding: utf-8 -*-
import py2exe
DLLLIST = ( 'mfc90.dll', 'msvcp90.dll', 'qtnetwork.pyd',
                'qtxmlpatterns4.dll', 'qtsvg4.dll' )
ORIGISSSYSTEMDLL = py2exe.build_exe.isSystemDLL
def is_system_dll( pathname ):
	"""
	Override the function in py2exe to determine if a dll should be included
	@param pathname: La ruta del ensamblado
	"""
	if os.path.basename( pathname ).lower() in DLLLIST:
	    return 0
	return ORIGISSSYSTEMDLL( pathname )
py2exe.build_exe.isSystemDLL = is_system_dll


# Ok, now we are going to build our target class.
# I chose this building strategy as it works perfectly for me :-D

GUI2Exe_Target_1 = Target( 
    # what to build
    script = "esquipulas.py",
    icon_resources = icon_resources,
    bitmap_resources = bitmap_resources,
    other_resources = other_resources,
    dest_base = "esquipulas",
    version = "1.1",
    company_name = "Cusuco Soft",
    copyright = "GPL V3",
    name = "esquipulas.exe",

    )

# No custom class for UPX compression or Inno Setup script

# That's serious now: we have all (or almost all) the options py2exe
# supports. I put them all even if some of them are usually defaulted
# and not used. Some of them I didn't even know about.

setup( 

    # No UPX or Inno Setup

    data_files = data_files,

    options = {"py2exe": {"compressed": 2,
                          "optimize": 2,
                          "includes": includes,
                          "excludes": excludes,
                          "packages": packages,
                          "dll_excludes": dll_excludes,
                          "bundle_files": 3,
                          "dist_dir": "dist",
                          "xref": False,
                          "skip_archive": False,
                          "ascii": False,
                          "custom_boot_script": '',
                         }
              },

    zipfile = None,
    console = [],
    windows = [GUI2Exe_Target_1],
    service = [],
    com_server = [],
    ctypes_com_server = []
    )

# This is a place where any post-compile code may go.
# You can add as much code as you want, which can be used, for example,
# to clean up your folders or to do some particular post-compilation
# actions.

# No post-compilation code added


# And we are done. That's a setup script :-D

